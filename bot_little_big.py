from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from button import user_game, user_game_param
from aiogram.dispatcher.filters import Text
import logging
import os
import aiofiles
import random


number = random.randint(1, 15)
param = random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])
count_of_attempts = 1
count = 1
print(number)

bot = Bot('5958293925:AAGh2IVIUkvGfygLO-ebFbIzU-r0QfZJnAA')
dp = Dispatcher(bot)

users = dict()


@dp.message_handler(commands='start')
async def start_message(message: types.Message):
    await message.answer(f'–í –∫–∞–∫—É—é –≤—ã –∏–≥—Ä—É —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å ?', reply_markup=user_game)


@dp.message_handler(Text(equals='–ë–æ–ª—å—à–µ-–ú–µ–Ω—å—à–µ', ignore_case=True))
async def start_game_little_big(message: types.Message):
    global count_of_attempts

    if str(message.from_user.id) not in users.keys():
        users[str(message.from_user.id)] = message.from_user.full_name

        async with aiofiles.open('users_data.txt', 'w+') as users_file:
            for ID, username in users.items():
                await users_file.write(f'ID: {ID} | Username: {username}')

    if count_of_attempts == 1:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, —è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15, –ø–æ–ø—Ä–æ–±—É–π –µ–≥–æ —É–≥–∞–¥–∞—Ç—åüòâ')
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æüßê')


@dp.message_handler(Text(equals='–æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞', ignore_case=True))
async def start_game_param(message: types.Message):
    global count_of_attempts

    if count_of_attempts == 1:
        await message.answer('–Ø –±—Ä–æ—Å–∏–ª –º–æ–Ω–µ—Ç–∫—Éü™ô: –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞?', reply_markup=user_game_param)
    else:
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞üßê', reply_markup=user_game_param)


@dp.message_handler(Text(equals='–û—Ä—ë–ª', ignore_case=True))
async def info_param(message: types.Message):
    global param, count_of_attempts

    if str(message.text) == param:
        await message.answer(f'\n–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {count} –ø–æ–ø—ã—Ç–∫—É\–ø–æ–ø—ã—Ç–æ–∫', reply_markup=user_game)
    else:
        await message.answer('–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ')
        count_of_attempts += 1


@dp.message_handler(Text(equals='–†–µ—à–∫–∞', ignore_case=True))
async def info_param(message: types.Message):
    global param, count_of_attempts

    if str(message.text) == param:
        await message.answer(f'\n–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {count} –ø–æ–ø—ã—Ç–∫—É\–ø–æ–ø—ã—Ç–æ–∫', reply_markup=user_game)
    else:
        await message.answer('–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑üôÉ')
        count_of_attempts += 1


@dp.message_handler()
async def info(message: types.Message):
    global number, count_of_attempts

    try:
        if int(message.text) == number:
            await message.answer(f'–í—ã —É–≥–∞–¥–∞–ª–∏!üéâ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {count_of_attempts}', reply_markup=user_game)

        elif int(message.text) < number:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æüôÉ')
            count_of_attempts += 1
        else:
            await message.answer(f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æüôÉ')
            count_of_attempts += 1
    except:
        print(13)

if __name__ == '__main__':
    print('bot polling started')
    executor.start_polling(dp, skip_updates=True)